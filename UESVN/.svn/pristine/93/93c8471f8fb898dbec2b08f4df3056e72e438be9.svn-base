// Fill out your copyright notice in the Description page of Project Settings.

#include "BirdPawn.h"
#include <PaperFlipbookComponent.h>
#include <ConstructorHelpers.h>
#include <PaperFlipbook.h>
#include <Camera/CameraComponent.h>
#include <Curves/CurveFloat.h>
#include <Sound/SoundWave.h>
#include <Kismet/GameplayStatics.h>

// Sets default values
ABirdPawn::ABirdPawn()
{
 	// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;

	//需要先给小鸟加一个根
	//CreateDefaultSubobject函数添加一个子组件
	RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComp"));

	BirdRender = CreateDefaultSubobject<UPaperFlipbookComponent>(TEXT("BirdRenderComp"));
	//鸟依附到根组件
	BirdRender->SetupAttachment(RootComponent);
	//加载鸟的动画资产
	ConstructorHelpers::FObjectFinder<UPaperFlipbook> BirdSource(TEXT("PaperFlipbook'/Game/FlappyBird/Flipbooks/Birds/FB_Bird_Red.FB_Bird_Red'"));
	//设置加载的动画资产到资产组件
	BirdRender->SetFlipbook(BirdSource.Object);

	//创建一个相机组件
	MainCameraComp = CreateDefaultSubobject<UCameraComponent>(TEXT("MainCameraComp"));
	//调整相机依附关系，放到根上
	MainCameraComp->SetupAttachment(RootComponent);
	//调整相机旋转
	MainCameraComp->SetRelativeRotation(FRotator(0, -90, 0));
	//贴脸 ，把相机向后移动，向Y轴移动
	MainCameraComp->SetRelativeLocation(FVector(0, 50, 0));
	//调整相机视口模式
	MainCameraComp->SetProjectionMode(ECameraProjectionMode::Orthographic);
	//调整相机视口尺寸
	MainCameraComp->SetOrthoWidth(1000.f);

}

// Called when the game starts or when spawned
void ABirdPawn::BeginPlay()
{
	Super::BeginPlay();
	LockBirdPhysicState();

	//加载曲线数据资产
	BirdFloatCurve = LoadObject<UCurveFloat>(nullptr, TEXT("CurveFloat'/Game/FlappyBird/Data/CUR_BirdFloat.CUR_BirdFloat'"));

	if (BirdFloatCurve)//当指针不为null时，执行if内的逻辑
	{
		//通过给定的时间值获取曲线数据
		float Value = BirdFloatCurve->GetFloatValue(1);
		UE_LOG(LogTemp, Log, TEXT("Load Success  %f"), Value);
	}
	if (!BirdFloatCurve)//当指针为null时，执行if内的逻辑
	{
		UE_LOG(LogTemp, Log, TEXT("Load Error"));
	}
	//加载音波文件
	FlySound = LoadObject<USoundWave>(nullptr, TEXT("SoundWave'/Game/FlappyBird/Sounds/fly.fly'"));
}

void ABirdPawn::OnDoFly()
{
	if (CurrentState != EBirdState::EBS_Fly)
	{
		return;
	}

	//为了解决力的作用关系，我们添加力之前先将鸟的移动速度去掉
	BirdRender->SetPhysicsLinearVelocity(FVector::ZeroVector);//修改速度为0
	//添加一个作用力（脉冲力）
	BirdRender->AddImpulse(FVector::UpVector * 400, NAME_None, true);
	//播放声音
	UGameplayStatics::PlaySound2D(this, FlySound);
}

void ABirdPawn::LockBirdPhysicState()
{
	//锁定物理的操作关系
	
	//获取物理body实例
	FBodyInstance* Body = BirdRender->GetBodyInstance();
	if (Body)
	{
		//锁定旋转
		Body->bLockXRotation = true;
		Body->bLockZRotation = true;
		//锁定位移
		Body->bLockYTranslation = true;
		//创建约束器
		Body->CreateDOFLock();
	}
}

void ABirdPawn::UpdateFace(float DeltaTime)
{
	if (CurrentState == EBirdState::EBS_Wait || CurrentState == EBirdState::EBS_Dead)
	{
		return;
	}

	//获取Z轴的偏移值
	float offsetZ = BirdRender->GetPhysicsLinearVelocity().Z;
	//约束一下Pitch的值范围
	float Pitch = FMath::Clamp(offsetZ * DeltaTime * 10.f, -70.f, 70.f);
	BirdRender->SetRelativeRotation(FRotator(Pitch, 0, 0));
}

void ABirdPawn::UpdateBirdFloat(float DeltaTime)
{
	if (CurrentState != EBirdState::EBS_Wait)//如果小鸟不是处于等待状态就不要执行下面的逻辑
	{
		return;
	}
	if (!BirdFloatCurve || !BirdRender)//如果你加载的曲线资源为空，说明你加载失败了，就不需要执行后面的逻辑
	{
		return;
	}
	//累加时间
	BirdFloatTimeTick += DeltaTime;
	//检查是否超过了曲线数据点的最后一个位置
	//获取曲线的时间值范围
	float Min, Max;
	BirdFloatCurve->GetTimeRange(Min, Max);//获取曲线数据上的最小时间标记和最大时间标记
	if (BirdFloatTimeTick > Max)
	{
		BirdFloatTimeTick = Min;
	}
	//获取曲线上的数据值
	float Value = BirdFloatCurve->GetFloatValue(BirdFloatTimeTick);
	//修改鸟的悬浮位置
	BirdRender->SetRelativeLocation(FVector(0, 0, Value));
	
}

// Called every frame
void ABirdPawn::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
	UpdateFace(DeltaTime);
	UpdateBirdFloat(DeltaTime);
}

//安装用户的输入组件（这个函数只有Pawn有（Pawn和他的子类有，其他人没有））
// Called to bind functionality to input
void ABirdPawn::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
	Super::SetupPlayerInputComponent(PlayerInputComponent);
	//从这里绑定输入逻辑
	//四个参数  1、绑定输入事件名称   2、按键响应方式   3、回调通知对象   4、回调通知函数
	PlayerInputComponent->BindAction(TEXT("DoFly"), IE_Pressed, this, &ABirdPawn::OnDoFly);
}

void ABirdPawn::ChangeBirdState(EBirdState State)
{
	switch (State)
	{
	case EBirdState::EBS_Wait:
		break;
	case EBirdState::EBS_Fly:
		//开启小鸟的物理
		BirdRender->SetSimulatePhysics(true);
		break;
	case EBirdState::EBS_Drop:
		break;
	case EBirdState::EBS_Dead:
		break;
	default:
		break;
	}
	CurrentState = State;
}

